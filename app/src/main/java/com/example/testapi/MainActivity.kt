package com.example.testapiimport android.annotation.SuppressLintimport android.net.Uriimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.provider.OpenableColumnsimport android.text.Editableimport android.text.TextWatcherimport android.util.Logimport android.widget.Buttonimport android.widget.EditTextimport android.widget.ImageViewimport android.widget.SeekBarimport android.widget.Switchimport android.widget.TextViewimport android.widget.Toastimport androidx.activity.result.contract.ActivityResultContractsimport okhttp3.MediaType.Companion.toMediaTypeOrNullimport okhttp3.MultipartBodyimport okhttp3.RequestBody.Companion.toRequestBodyimport okhttp3.ResponseBodyimport org.json.JSONObjectimport retrofit2.*import retrofit2.converter.gson.GsonConverterFactoryclass MainActivity : AppCompatActivity() {    private lateinit var uploadButton: ImageView    private var selectedFileUri: Uri? = null    private val getContent =        registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->            uri?.let {                selectedFileUri = uri                uploadFileToServer()            }        }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        initView()        eventHandler()    }    private fun eventHandler() {        uploadButton.setOnClickListener {            selectFile()        }    }    private fun selectFile() {        getContent.launch("*/*")    }    private fun initView() {        uploadButton = findViewById(R.id.btnUpload)    }    @SuppressLint("Recycle")    private fun uploadFileToServer() {        selectedFileUri?.let { uri ->            val inputStream = contentResolver.openInputStream(uri)            inputStream?.let {                val fileName = getFileName(uri)                val requestBody = it.readBytes().toRequestBody("application/octet-stream".toMediaTypeOrNull())                val multipartBody = MultipartBody.Part.createFormData("file", fileName, requestBody)                uploadFile(multipartBody)            }        }    }    @SuppressLint("Range")    private fun getFileName(uri: Uri): String {        var fileName = ""        val cursor = contentResolver.query(uri, null, null, null, null)        cursor?.use {            if (it.moveToFirst()) {                fileName = it.getString(it.getColumnIndex(OpenableColumns.DISPLAY_NAME))            }        }        return fileName    }    private fun uploadFile(file:  MultipartBody.Part) {        val retrofit = Retrofit.Builder()            .baseUrl(BASE_URL)            .addConverterFactory(GsonConverterFactory.create())            .build()        val apiService = retrofit.create(ApiInterface::class.java)        val call = apiService.uploadFile(file)        call.enqueue(object : Callback<ResponseBody> {            override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {                if (response.isSuccessful) {                    Log.d(TAG, "File uploaded successfully")                    Toast.makeText(getApplicationContext(), "File uploaded successfully", Toast.LENGTH_SHORT).show();                    // Handle successful response                } else {                    Log.d(TAG, "Error uploading file")                    Toast.makeText(getApplicationContext(), "Error uploading file", Toast.LENGTH_SHORT).show();                }            }            override fun onFailure(call: Call<ResponseBody>, t: Throwable) {                Log.d(TAG, "Failed to upload file")                Toast.makeText(getApplicationContext(), "Failed to upload file", Toast.LENGTH_SHORT).show();                t.printStackTrace()                return  // Add this line            }        })    }    companion object {        private const val BASE_URL = "http://121c8a4d-fc66-4418-b015-784e1299fa51.mock.pstmn.io/"        private const val TAG = "UpdateFragment"    }}