package com.example.testapiimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.text.Editableimport android.text.TextWatcherimport android.util.Logimport android.widget.EditTextimport android.widget.SeekBarimport android.widget.Switchimport android.widget.TextViewimport android.widget.Toastimport org.json.JSONObjectimport retrofit2.*import retrofit2.converter.gson.GsonConverterFactoryconst val BASE_URL = "http://121c8a4d-fc66-4418-b015-784e1299fa51.mock.pstmn.io"class MainActivity : AppCompatActivity() {    private lateinit var slider : SeekBar    private lateinit var butonOnOff : Switch    private lateinit var values :TextView    private lateinit var viewLat :TextView    private lateinit var viewLng :TextView    private lateinit var viewLed1 :TextView    private lateinit var viewLed2 :TextView    private lateinit var viewSwitch: TextView    private lateinit var viewFreg :TextView    private lateinit var viewFileName :TextView    private var currentSeekbar = 0    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        initView()        getMyData()        putMyData()        SeekBarEvent()        eventHandler()    }    private fun eventHandler() {        butonOnOff.setOnCheckedChangeListener { _, isChecked ->            val newSwitch1 = if (isChecked) "on" else "off"            viewSwitch.text = newSwitch1            butonOnOff.text = newSwitch1            val message = if (isChecked) "Switch1:ON" else "Switch1:OFF"            Toast.makeText(this@MainActivity, message,                Toast.LENGTH_SHORT).show()            if(!isChecked) slider.progress = 0        }    }    private fun SeekBarEvent() {        slider.max = 50        slider.progress = currentSeekbar        slider.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {                viewFreg.text = progress.toString()                currentSeekbar = progress                if(currentSeekbar==0) butonOnOff.isChecked = false                else butonOnOff.isChecked = true            }            override fun onStartTrackingTouch(seekBar: SeekBar?) {            }            override fun onStopTrackingTouch(seekBar: SeekBar?) {            }        })        viewFreg.addTextChangedListener(object : TextWatcher {            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {            }            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {                s?.toString()?.let { value ->                    if (value.isNotEmpty()) {                        val progress = value.toIntOrNull()                        progress?.let {                            if (it >= slider.min && it <= slider.max) {                                slider.progress = it                                currentSeekbar = it                            }                        }                    }                }            }            override fun afterTextChanged(s: Editable?) {            }        })    }    private fun initView() {        slider = findViewById(R.id.control_blink)        butonOnOff = findViewById(R.id.switch_button)        values = findViewById(R.id.switch_button)        viewLat = findViewById(R.id.lat_id)        viewLng = findViewById(R.id.lng_id)        viewLed1 = findViewById(R.id.led1_id)        viewLed2 = findViewById(R.id.led2_id)        viewSwitch = findViewById(R.id.view_Switch)        viewFreg = findViewById(R.id.view_freq)        viewFileName = findViewById(R.id.viewtest)    }    private fun getMyData() {        val retrofitBuilder= Retrofit.Builder()            .addConverterFactory(GsonConverterFactory.create())            .baseUrl(BASE_URL)            .build()            .create(ApiInterface::class.java)        val retrofitData = retrofitBuilder.getData()        retrofitData.enqueue(object : Callback<MyDataItem?> {            override fun onResponse(call: Call<MyDataItem?>, response: Response<MyDataItem?>) {                val responseBody = response.body()                if (responseBody != null) {                    var lat = responseBody.myLocation.lat                    var lng = responseBody.myLocation.lng                    var led1 = responseBody.statusLed.led1                    var led2 = responseBody.statusLed.led2                    var switch = responseBody.Buton.status                    var freg = responseBody.Buton.freq                    var filename =  responseBody.fileUpdate                    viewLat.text = lat                    viewLng.text = lng                    viewLed1.text = "LED 1: "+led1                    viewLed2.text = "LED 2: "+led2                    viewSwitch.text = switch.toString()                    viewFreg.text = freg.toString()                    viewFileName.text = filename                }                if (viewSwitch.text.toString() == "on") {                    butonOnOff.isChecked = true                } else {                    butonOnOff.isChecked = false                }            }            override fun onFailure(call: Call<MyDataItem?>, t: Throwable) {                Log.d("TAG", "onFailure GET DATA: ")            }        })    }    private fun putMyData() {        val retrofitBuilder= Retrofit.Builder()            .addConverterFactory(GsonConverterFactory.create())            .baseUrl(BASE_URL)            .build()            .create(ApiInterface::class.java)        val buton = Buton(0, false)        val myLocation = MyLocation("21.0486068","105.8025759")        val statusLed = StatusLed(false,true)        val id = "1"        val data = MyDataItem(buton, id, myLocation, statusLed,"version2.hex")        val retrofitData = retrofitBuilder.putData(data)        retrofitData.enqueue(object : Callback<MyDataItem?> {            override fun onResponse(call: Call<MyDataItem?>, response: Response<MyDataItem?>) {                Toast.makeText(this@MainActivity,"successfull update",Toast.LENGTH_SHORT).show()                Log.i("TAG", "onResponse: ")            }            override fun onFailure(call: Call<MyDataItem?>, t: Throwable) {                throw IllegalArgumentException("Invalid argument!")                Toast.makeText(this@MainActivity,"error update",Toast.LENGTH_SHORT).show()                Log.i("TAG", "onFailure PUT DATA ")            }        })    }}